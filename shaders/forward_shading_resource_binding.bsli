//
// Copyright (C) YuqiaoZhang(HanetakaChou)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef _FORWARD_SHADING_RESOURCE_BINDING_BSLI_
#define _FORWARD_SHADING_RESOURCE_BINDING_BSLI_ 1

#include "configuration_constant.bsli"

#include "../../Brioche-Shader-Language/shaders/brx_shader_language.bsli"
#include "surface.bsli"
#include "../../Voxel-Cone-Tracing/include/brx_voxel_cone_tracing.h"

// 1 0 4 -> 1 0 Surface_Buffer_Count
// 1 4 4 -> 1 Surface_Buffer_Count Surface_Texture_Count

brx_read_write_texture_3d_uint(u_clipmap_texture_mask, 0, 0);

brx_read_write_texture_3d_uint(u_clipmap_texture_opacity, 0, 1);

brx_read_write_texture_3d_uint(u_clipmap_texture_illumination, 0, 2);

brx_sampler_state(s_sampler, 0, 3);

brx_cbuffer(forward_shading_none_update_set_uniform_buffer_binding, 0, 4)
{
    brx_column_major brx_float4x4 g_view_transform;
    brx_column_major brx_float4x4 g_projection_transform;
    brx_column_major brx_float4x4 g_inverse_view_transform;
    brx_column_major brx_float4x4 g_inverse_projection_transform;
    brx_column_major brx_float4x4 g_world_to_environment_map_transform;
    brx_column_major brx_float4x4 g_viewport_depth_direction_view_matrices[BRX_VCT_VIEWPORT_DEPTH_DIRECTION_COUNT];
    brx_column_major brx_float4x4 g_clipmap_stack_level_projection_matrices[BRX_VCT_CLIPMAP_STACK_LEVEL_COUNT];
    brx_uint g_environment_map_layout;
    brx_uint _unused_forward_shading_none_update_set_uniform_buffer_binding_padding_1;
    brx_uint _unused_forward_shading_none_update_set_uniform_buffer_binding_padding_2;
    brx_uint _unused_forward_shading_none_update_set_uniform_buffer_binding_padding_3;

};

brx_read_only_byte_address_buffer(t_environment_map_sh_coefficients, 0, 5);

brx_texture_2d(t_lut_specular_hdr_fresnel_factors, 0, 6);

brx_texture_2d_array(t_lut_specular_transfer_function_sh_coefficients, 0, 7);

brx_cbuffer(forward_shading_per_surface_group_update_set_uniform_buffer_binding, 1, 0)
{
    brx_column_major brx_float4x4 g_model_transform;
};

brx_read_only_byte_address_buffer_table(t_surface_buffers, 2, 0, 4);

brx_texture_2d_table(t_surface_images, 2, 4, 4);

#define forward_shading_root_signature_macro                                                            \
    brx_root_signature_root_parameter_begin(forward_shading_root_signature_name)                        \
    brx_root_signature_root_descriptor_table_uav(0, 0, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_uav(0, 1, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_uav(0, 2, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_sampler(0, 3, 1) brx_root_signature_root_parameter_split   \
    brx_root_signature_root_cbv(0, 4) brx_root_signature_root_parameter_split                           \
    brx_root_signature_root_descriptor_table_srv(0, 5, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_srv(0, 6, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_srv(0, 7, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_cbv(1, 0) brx_root_signature_root_parameter_split                           \
    brx_root_signature_root_descriptor_table_srv(2, 0, 4) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_srv(2, 4, 4)                                               \
    brx_root_signature_root_parameter_end

#define brx_voxel_cone_tracing_voxelization_root_signature_macro                                        \
    brx_root_signature_root_parameter_begin(brx_voxel_cone_tracing_voxelization_root_signature_name)    \
    brx_root_signature_root_descriptor_table_uav(0, 0, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_uav(0, 1, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_uav(0, 2, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_sampler(0, 3, 1) brx_root_signature_root_parameter_split   \
    brx_root_signature_root_cbv(0, 4) brx_root_signature_root_parameter_split                           \
    brx_root_signature_root_descriptor_table_srv(0, 5, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_srv(0, 6, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_srv(0, 7, 1) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_cbv(1, 0) brx_root_signature_root_parameter_split                           \
    brx_root_signature_root_descriptor_table_srv(2, 0, 4) brx_root_signature_root_parameter_split       \
    brx_root_signature_root_descriptor_table_srv(2, 4, 4)                                               \
    brx_root_signature_root_parameter_end

#endif
